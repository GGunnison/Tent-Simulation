%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  ArmyTent Forward Sim
%
%  Peter Lindahl, Grant Gunnison
%  Last Update: 2/2/2016
%
%  This program performs the forward simulation of the army forward
%  operating base under predictive model control.  
%
%               *** work in progress ***
%
%  Base Model:
%
%       Single tent model:
%       dTi/dt = -Ti/(R*C) + Te/(R*C) + k/C*qs + 1/C*ql + 1/C*qh
%
%       Multi-tent State-space model:
%       dx/dt   = Ax + Bu
%       y       = Cx + Du
%
%       x - state vector containing internal tent temperatures, i.e.
%           [Ti1; Ti2; ...; Tiz] where i indicates internal and z is number
%           of tents
%       u - exogenous input vector with form:
%           [Te; qs1; ql1; qh1; qs2; ql2; qh2;...; qsz; qlz; qhz] where s
%           indicates solar irradiation(qs in W/m^2), l indicates internal
%           heat loads (ql in W), h indicates heater on or off (1 or 0); 
%           and z is number of tents
%       A is state matrix, diagonal matrix with 1/tau1, ... 1/tauz on main 
%       diagonal, where tau = R * C
%       B is input matrix relating dx/dt to input contributions
%       C is the output matrix (and confusingly different than heat 
%       capacity C) and is an identity matrix size z by z as temperature is 
%       directly observable
%       D is feedthrough matrix as inputs don't directly affect
%       measurements
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clear;
close all;

% select cvx solver
cvx_solver Gurobi

% set weather data files to use for simulation
weafil = 'June2014weatherdata.txt';
weadir = '/Users/GrantGunnison/Dropbox/Research/Tent Simulation';
% weadir = '/Users/lindahl/Documents/Research/Projects/Devens Temperature Experiment/Forward Simulation/Version 2.0/';

cd(weadir);

%% Get weather data for simulation

raw = csvread(weafil,32,0);

% Set start time in terms of epoch time and define data streams for
% simulation
st = raw(1,1)*10^-6; % in seconds
time = raw(:,1)*10^-6-st; % in seconds
Tx = ((raw(:,2)-32)*5/9)-10; % (Convert F to C and subtract 15 just for demonstration of colder weather)
sol = raw(:,3); % solar irradiation in W/m^2

% plot weather if desired
%figure;
%plot(time/60,Tx)
%% Set Parameters
% Parameters (pulled these from David's code, not all used currently)
Z = 3;                          %  Number of tents (1 heater per tent)      (-)
G = 2;                          %  Number of generators                     (-)
n = 2*3600;                     %  Planning horizon                         (s)
ns = time(end) - n - time(1);   %  Length of simulation                     (s)
tp = 10*60;                     %  Time interval of planning horizon        (s)
I = n/tp+1;                     %  MILP time intervals                      (-)
tu = 20*60;                     %  MILP update time intervals               (s)
Ms = ceil(ns/tu+1);             %  Number of MILP updates                   (-)

Qz = 10.0e3;                    %  Nominal Heating output of heater z       (W)
Qlz = 1000;                     %  Nominal internal loads in each tent      (W)
etaz = 1;                       %  Nom. Power-Heat efficiency of heater z   (Wth/We)
Pg = 60.0e3;                    %  Nominal Power output of generator g      (W)
Fg = 5.37/3600;                 %  Nom. Fuel consumption of generator g     (Gal/s) http://www.marcorsyscom.marines.mil/Portals/105/pdmeps/docs/MEP/B1016B1021.pdf
Rz = 0.00182;                   %  Nominal Resistance value of tent z       (K/W)
Cz = 1.47e6;                    %  NominalCapacitance value of tent z       (J/K)
kz = 2.38;                      %  Nominal Solar absorptance coefficient z  (m^2)
rho_temp = 0.5*Pg;              %  Penalty for temperature violation    (W)
Efan = 1.5e3;                   %  Power consumption of supply fan z    (W)
Tll = 20;                       %  Lower temperature limit of tent z    (C)
Tul = 25;                       %  Upper temperature limit of tent z    (C)
T_o = 22;                       %  Initial temperature of tent z        (C)
plt = 1;                        %  Plot graphs of the results.

% Set parameters list for MILP optimization
par = [Z, G, st, n, tp, I, Qz, Efan, etaz, Pg, Fg, Rz, Cz, kz, rho_temp];

%% Load tent-load profiles

tents = [1, 1, 1];       % Variable describes of each type of tent in ["sleep", 

q_int = load_profile(st, length(time), Z, tents);

% q_int = Qlz*ones(length(time),Z);    % Load internal load profile (for now just set to constant amount)

%% Load tent-temperature constraint profiles

constraints = [Tll*ones(size(time)), Tul*ones(size(time))];
constraints = repmat(constraints,1,Z);

%% Create forward simulation system

% function generates the nominal multi-tent base model
[A, B, C, D] = ss_variables(Z, Qz, kz, Rz, Cz);

% manually adjust SS-matrices here if desired for simulation:
A = A;
B = B;
C = C;
D = D;

% create state space system
sys = ss(A,B,C,D); 

% create nominal initial state vector
x0 = T_o*ones(Z,1);
% manually adjust the initial state vector here:
x0 = x0;

%% Run simulation
% This will allow the inputs to change based on optimization / control
% updates at intervals

% Preallocate forecasted heater and generator usage
Uz = zeros(I,Z,Ms);  % Add zeros to save last full MILP command
Ug = zeros(I,G,Ms);  % Add zeros to save last full MILP command
TMILP = zeros(I,Ms);  % Add zeros to save last full MILP command

% Main Loop
x = x0;  % Set initial state of tents
m = 1;      % Set counter for storing data to 1
mm = 0;     % Set subcounter for MILP update to 0
tl = -Inf;     % Initiate last time of MILP update.  Hasn't happened so set to -Inf 
while time(m)<100000
    
    % uncomment to display time during simulation
    display([num2str(time(m)/60),' mins']);
    
    % check if time for an update of MILP
    if (time(m) - tl > tu)
        
        % update counter
        mm = mm + 1;
        
        % update tl
        tl = (mm-1)*tu;
        
        % Get weather forecast data (don't plot, 0 for last argument)
        [TxF, qsolF,timecheck] = ReadWeather(weafil, time(m)+st, n, tp, 0); % weather data
        TxF = ((TxF-32)*5/9) -10; % (Convert F to C and subtract 15 just for demonstration of colder weather)
        forecast = [TxF, qsolF]; % Combine forecast data
        forecast = forecast(1:I,:); % Remove extra row if one is there 
        
        % Get tent-load forecast data and constraint profiles
        q_intF = [];
        constF = [];
        for xx = 0:(length(forecast)-1)
            [~,bb] = min(abs(time - (time(m)+xx*tp)));
            q_intF = [q_intF; q_int(bb,:)]; % tent-load forecast
            constF = [constF; constraints(bb,:)]; % constraint profile
        end
                 
        % Call MILP
        [time_MILP, uz, ug] = MILP(par, x(:,m), forecast, q_intF, constF, 0);
        time_MILP = time_MILP*60 + tl-tp;   % comes back in mins. return to secs and add to current time   
        
        Uz(:,:,mm) = uz;
        Ug(:,:,mm) = ug;
        TMILP(:,mm) = time_MILP;
        
    end
               
    % Update simulated set points
    if m==1;    % if first simulation, need to get first setpoints
        uz_sim = uz((time(m)>=time_MILP),:);
        uz_sim = uz_sim(end,:);
    end
    
    % for simulation, need to know next setpoint for time(m+1)
    uz_sim2 = uz(time(m+1)>=time_MILP,:);
    uz_sim2 = uz_sim2(end,:);
    uz_sim = [uz_sim;uz_sim2];  % keep track of setpoints
    
    % create state space input matrix
	U = ss_inputs(Z, Tx(m:(m+1)), sol(m:(m+1)), q_int(m:(m+1),:), uz_sim(m:(m+1),:));
        
%     % Load single time-step data
%     % Get weather forecast data (don't plot, 0 for last argument)
%         [TxF, qsol] = ReadWeather(weafil, st+m*ts, n, tp, 0); % weather data
%         Tx = ((TxF-32)*5/9) -15; % (Convert F to C and subtract 15 just for demonstration of colder weather)
        
    % Simulate single time-step
    warning('off','Control:analysis:LsimStartTime'); % turn off time start warning
    sim = lsim(sys,U,time((m):(m+1)), x(:,m));
    x = [x,sim(2,:)']; % time-matrix of state vectors
    
    m = m + 1; % update counter

end

%% figures
figure;
hold on;
plot(repmat(time(1:m),1,Z)/60,x','-o','markersize', 2);
for z = 1:Z
    plot(time(1:m)/60, constraints(1:m,1), 'k');
    plot(time(1:m)/60, constraints(1:m,2), 'k');
end
xlabel('Time (min)');
ylabel('Tent Temperatures (C)');
grid on;
plot(time(1:m)/60,Tx(1:m),'-ok','markersize', 2);
tents = {};
for num = 1:Z
     s = [' Tent ', num2str(num), ''];
     tents = [tents, s];
end
legend(tents);